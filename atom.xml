<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Conjuring Daemons]]></title>
  <link href="http://henrycase.github.com/atom.xml" rel="self"/>
  <link href="http://henrycase.github.com/"/>
  <updated>2012-07-02T22:22:25-06:00</updated>
  <id>http://henrycase.github.com/</id>
  <author>
    <name><![CDATA[Henry Case]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First look at Clojure and BugLabs]]></title>
    <link href="http://henrycase.github.com/blog/2012/07/02/first-look-at-clojure-and-buglabs/"/>
    <updated>2012-07-02T21:43:00-06:00</updated>
    <id>http://henrycase.github.com/blog/2012/07/02/first-look-at-clojure-and-buglabs</id>
    <content type="html"><![CDATA[<p>I recently acquired some <a href="http://www.buglabs.net">BugLabs</a> kit,
including their
<a href="http://wiki.buglabs.net/index.php/Hardware:BUG_YT_Module">BUG YT</a>,
<a href="http://wiki.buglabs.net/index.php/Hardware:BUGlocate_Module">BUGlocate</a>,
<a href="http://wiki.buglabs.net/index.php/Hardware:BUGview2_LCD_Module">BUGview2</a>,
and
<a href="http://wiki.buglabs.net/index.php/Hardware:BUGusb_Module">BUGusb</a>
with the intention to use it as my personal computational device,
writing code for it in <a href="http://www.clojure.org">Clojure</a>.</p>

<p>The BUG YT is a fairly interesting bit of hardware that is set up to
run Java code via an OSGi framework. As Clojure is one of the
languages I have been using heavily lately, I wondered how well (or
how difficult) it would be to hack in Clojure on one; the only problem
being a nearly complete lack of skills in Java.</p>

<p>One of the things the Bug provides is a web services interface. As of
right now, there isn&#8217;t a good way to hook into the OSGi from within a
Clojure project. However, it is entirely possible to consume the web
services by parsing the XML provided.</p>

<p>There is <a href="https://github.com/henrycase/BugLocation">a quick demo</a>
showing the Location service being utilised. The README elucidates
further; however we shall take a quick stroll through the codebase to
purview the methodologies employed herein. The first thing to note is
that a deploy script is provided; it is far faster (and less
demanding) to run directly from a
<a href="https://github.com/technomancy/leiningen">leiningen</a>-generated
uberjar than it is to run from the source directly on the BUG. (This
is a case of startup times: actual runtimes are comparable, but rather
a matter of the time it takes leiningen to start on the Bug, which is
rather resource constrained compared to the typical use-case.)</p>

<p>Here are some numbers to prove this:</p>

<figure class='code'><figcaption><span>Running the code from leiningen </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">case</span>@threejane:~/BugLocation<span class="nv">$ </span><span class="nb">time </span>lein run
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> checking <span class="k">for </span>location service...
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> location service found.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> polling...
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> no fix!
</span><span class='line'>
</span><span class='line'>real  1m21.620s
</span><span class='line'>user  1m2.547s
</span><span class='line'>sys   0m4.203s
</span><span class='line'><span class="k">case</span>@threejane:~/BugLocation<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that <code>run.sh</code> is simply a wrapper around calling the jar; it
sources the <code>environ.sh</code> and runs the jarfile, passing arguments through.</p>

<figure class='code'><figcaption><span>Running the code from the uberjar </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">case</span>@threejane:~/deploy/BugLocation<span class="nv">$ </span><span class="nb">time</span> ./run.sh
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> checking <span class="k">for </span>location service...
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> location service found.
</span><span class='line'><span class="o">[</span>+<span class="o">]</span> polling...
</span><span class='line'><span class="o">[</span>!<span class="o">]</span> no fix!
</span><span class='line'>
</span><span class='line'>real  0m33.424s
</span><span class='line'>user  0m14.461s
</span><span class='line'>sys   0m1.203s
</span><span class='line'><span class="k">case</span>@threejane:~/deploy/BugLocation<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>If you need a faster response time, you&#8217;ll want to run from the
jar. Although at 33 seconds for the &#8220;fast&#8221; start, it may not be a huge
concern.</p>

<p>As mentioned in the title, this is merely a first stab at the
problem. A library for interacting with services this way is
forthcoming, although my ability to verify with modules other than the
Location and Acceleration services will be hampered by not having the
hardware. (Have an XML dump of /services and /services/:service? Feel
free to email them to me - henry at metacircular dot net.)</p>

<p>Hacks and glory await!</p>
]]></content>
  </entry>
  
</feed>
